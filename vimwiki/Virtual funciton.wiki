Godotの「built-in virtual function」とは、Godotエンジンによって事前に用意された特別な関数で、特定のタイミングで自動的に呼び出されるよう設計されています。これらの関数は、ユーザーが特に指定しなくても、シーンやオブジェクトのライフサイクルに応じて呼び出されます。

以下に代表的な関数をいくつか紹介します。

1. **`_init()`**:
   - オブジェクトの初期化時に一度だけ呼び出されます。インスタンスが作成される際の初期設定や値の代入などに使います。
   - この関数は、自動的に呼び出されるコンストラクタのような役割を果たします。

2. **`_ready()`**:
   - ノードがシーンツリーに追加されてから呼び出されます。
   - 他のノードが準備できている状態で実行されるため、ノード間の参照や初期化に適しています。

3. **`_process(delta)`**:
   - ゲームのフレームごとに呼び出され、通常の更新処理を行うために使います。`delta` は前のフレームからの経過時間です。
   - キャラクターの動きや画面更新など、定期的に実行する処理を記述します。

4. **`_physics_process(delta)`**:
   - フィジックスのフレームごとに呼び出され、物理演算が絡む更新処理を記述する際に使います。
   - こちらも `delta` パラメータを受け取り、物理エンジンのステップ間の経過時間が分かるようになっています。

5. **`_input(event)`**:
   - プレイヤーからの入力（キー、マウスなど）があると呼び出されます。
   - プレイヤーの操作に対する反応をここに記述します。

6. **`_exit_tree()`**:
   - ノードがシーンツリーから削除されるときに呼び出されます。
   - 終了処理やリソースの解放、接続解除などに使います。

### 使い方のメリット
これらの関数を使用することで、特定のライフサイクルイベントに対応した処理を自動的に実行できるため、ゲームの設計がシンプルになります。また、エンジンがこれらの関数を自動的に呼び出してくれるため、プレイヤー入力やフレーム更新に関する処理を手動で管理する必要がありません。

### 例
```gd
extends Sprite2D

func _ready():
    print("Node is ready!")

func _process(delta):
    position.x += 10 * delta
    print("Updating position every frame")
```

この例では、`_ready()` がシーンツリーに追加されるときに1回呼ばれ、`_process(delta)` はフレームごとに呼び出されて、毎フレームごとに `position.x` を更新する仕組みです。

### 注意点
- **オーバーライド**: これらの関数を使うには、クラスで関数を「オーバーライド」する必要があります。Godotでは、このオーバーライドによってエンジンが適切に関数を呼び出せるようになっています。
- **適切な関数を選ぶ**: フレームごとに処理が必要な場合は `_process` を使いますが、物理演算が絡む場合は `_physics_process` が推奨されます。
