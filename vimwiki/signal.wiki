= Connect a signal via Godot engine =
This is a using signal example. Clicking the button signal to our Sprite2D, and we want to call a function that will toggle its motion on and off.
    button - signal - Sprite2D 
    
1. Make button
2. To Connect signal, Select the Button Node and on the right side of the editor, click on the tab named "Node" next to the Inspector.
3. The dock displays a list of signals available on the selected node.
4. Double-click the "pressed" signal to open the node connection window.
5. There, you can connect the signal to the Sprite2D node. The node needs a receiver method, a function that Godot will call when the Button emits the signal.The editor generates one for you. By convention, we name these callback methods "_on_node_name_signal_name".Here, it'll be "_on_button_pressed".

NOTE:If you are using an external editor (such as VS Code) this automatic code generation might not work. In this case you need to to connect the signal via code as explained in the next section.

6. After the creation of the signal, and jump to the Script workspace. We can see the new method with a connection icon in the left margin.

NOTE:If you used C#, may not see the new function.Please create the new function that following by C# Convention. This time'll be "OnButtonPressed"

7. func _on_button_pressed():
func _on_button_pressed():
	set_process(not is_processing())

When the button on, process stop.Button is no code.



---------------------------------------------------------------------------------------------------------------------------------------------
= Connect a signal via code =
Timer - signal - Sprite2D

1.Add Timer node under the Sprite2D.
2.Setting the Timer to enable the Autostart property.
3.Go to Sprite2D Script.
4.Coding
We need to do two operations to connect the nodes via code:
    * Get a reference to the Timer from the Sprite2D.
    * Call the connect() method on the Timer's "timeour" signal.
    
    NOTE: To connect to a signal via code, you need to call the connect() method of signal you want to listen to.
	In this case, we want to listen to the Time's "timeout" signal.
	
Add below.
    func _ready():
	    var timer = get_node("Timer")
	    timer.timeout.connect(_on_timer_timeout)
    
    func _on_timer_timeour():
	visible = not visible


---------------------------------------------------------------------------------------------------------------------------------------------
= Custom signals =
